{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","DEFAULT","sortMetod","setSortMetod","reversed","setReversed","visibleGoods","goods","reverse","preparedGoods","sort","good1","good2","SORT_METOD_NAME","localeCompare","SORT_METOD_LENGTH","length","getPreparedGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,uBAAAA,E,2BAAAA,E,YAAAA,M,KAmCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAASI,SAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCH,oBAAS,GAAzC,mBAAOI,EAAP,KAAiBC,EAAjB,KACMC,EAhCR,SACEC,EACAL,EACAM,GAEA,IAAMC,EAAa,YAAOF,GAqB1B,OAnBIL,GACFO,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQV,GACN,KAAKL,EAASgB,gBACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKf,EAASkB,kBACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXR,GACFC,EAAcD,UAGTC,EAMcQ,CAAiBnB,EAAiBI,EAAWE,GAUlE,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEE,IAAG,SAAU,UACX,CAAE,WAAYlB,IAAcL,EAASgB,kBAEzCQ,QAAS,kBAAMlB,EAAaN,EAASgB,kBANvC,iCAWA,wBACEM,KAAK,SACLD,UAAWE,IAAG,SAAU,aACtB,CAAE,WAAYlB,IAAcL,EAASkB,oBACvCM,QAAS,kBAAMlB,EAAaN,EAASkB,oBAJvC,4BASA,wBACEI,KAAK,SACLD,UAAWE,IAAG,SAAU,aACtB,CAAE,YAAahB,IACjBiB,QApCa,WACnBhB,GAAaD,IA+BT,sBASEF,GAAaE,IAEX,wBACEe,KAAK,SACLD,UAAU,4BACVG,QA1CI,WACdlB,EAAaN,EAASI,SACtBI,GAAY,IAqCJ,sBAUN,6BACGC,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YC7GlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.22cf95ff.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  SORT_METOD_NAME = 'name',\n  SORT_METOD_LENGTH = 'length',\n  DEFAULT = '',\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortMetod: SortType,\n  reverse: boolean,\n): string[] {\n  const preparedGoods = [...goods];\n\n  if (sortMetod) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortMetod) {\n        case SortType.SORT_METOD_NAME:\n          return good1.localeCompare(good2);\n\n        case SortType.SORT_METOD_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverse) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortMetod, setSortMetod] = useState(SortType.DEFAULT);\n  const [reversed, setReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer, sortMetod, reversed);\n  const handleRevers = () => {\n    setReversed(!reversed);\n  };\n\n  const onReset = () => {\n    setSortMetod(SortType.DEFAULT);\n    setReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            cn('button', 'is-info',\n              { 'is-light': sortMetod !== SortType.SORT_METOD_NAME })\n          }\n          onClick={() => setSortMetod(SortType.SORT_METOD_NAME)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success',\n            { 'is-light': sortMetod !== SortType.SORT_METOD_LENGTH })}\n          onClick={() => setSortMetod(SortType.SORT_METOD_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning',\n            { 'is-light': !reversed })}\n          onClick={handleRevers}\n        >\n          Reverse\n        </button>\n\n        {(sortMetod || reversed)\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={onReset}\n            >\n              Reset\n            </button>\n          )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}